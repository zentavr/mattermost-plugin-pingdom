name: release

on:
  push:
    tags:
      - 'v*'

concurrency: cut-release

env:
  GNUPGHOME: ${{ github.workspace }}/.gnupg

jobs:
  release:
    runs-on: self-hosted

    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      tag_name: ${{ steps.tag.outputs.tag_name }}

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: '1.20'
          check-latest: true

      - name: Set tag output
        id: tag
        run: echo "tag_name=${GITHUB_REF#refs/*/}" >> "$GITHUB_OUTPUT"

      - name: Import GPG Key
        run: |
          # Only run if GNUPGHOME is set and not empty
          if [ -n "$GNUPGHOME" ]; then
            # Check if the directory does not exist
            if [ ! -d "$GNUPGHOME" ]; then
              echo "Creating $GNUPGHOME directory..."
              mkdir -p "$GNUPGHOME"
              chmod 700 "$GNUPGHOME"
              echo "Directory $GNUPGHOME created with permissions 700."
            else
              echo "Directory $GNUPGHOME already exists."
            fi
          else
            echo "GNUPGHOME is not set or is empty; skipping creation."
          fi

          # Import the key from the environment variable:
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import

          # Ensure GPG can use the passphrase from the environment
          echo "use-agent" >> "$GNUPGHOME"/gpg.conf
          echo "allow-loopback-pinentry" >> "$GNUPGHOME"/gpg.conf
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Run GoReleaser
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@v6.1.0
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_EXPERIMENTAL: "true"
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_SIGNATURE_KEY_ID: ${{ vars.GPG_SIGNATURE_KEY_ID }}

      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"

  provenance:
    needs:
      - release
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.release.outputs.hashes }}"
      upload-assets: true # upload to a new release
      upload-tag-name: "${{ needs.release.outputs.tag_name }}"
